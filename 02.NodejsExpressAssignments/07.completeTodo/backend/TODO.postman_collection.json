{
	"info": {
		"_postman_id": "78a8055f-db21-4828-8ee6-012883f34544",
		"name": "TODO",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32314879"
	},
	"item": [
		{
			"name": "get todos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var template = `",
							"<style type=\"text/css\">",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
							"    .tftable tr {background-color:#ffffff;}",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
							"    .tftable tr:hover {background-color:#e0ffff;}",
							"</style>",
							"",
							"<table class=\"tftable\" border=\"1\">",
							"    <tr>",
							"        <th>ID</th>",
							"        <th>Title</th>",
							"        <th>Description</th>",
							"    </tr>",
							"    ",
							"    {{#each response}}",
							"        <tr>",
							"            <td>{{id}}</td>",
							"            <td>{{title}}</td>",
							"            <td>{{description}}</td>",
							"        </tr>",
							"    {{/each}}",
							"</table>",
							"`;",
							"",
							"function constructVisualizerPayload() {",
							"    return { response: pm.response.json() }",
							"}",
							"",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/todos",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todos"
					]
				},
				"description": "This endpoint sends an HTTP GET request to retrieve a list of todos from the server. The response will be in JSON format and will include the title, description, and id of each todo item.\n\nThe last execution of this request returned a status code of 200, indicating a successful response. The response body included an array of todo items, where each item had a title, description, and id.\n\nExample response:\n\n``` json\n[\n    {\n        \"title\": \"\",\n        \"description\": \"\",\n        \"id\": 0\n    }\n]\n\n ```"
			},
			"response": []
		},
		{
			"name": "post todos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var template = `",
							"<canvas id=\"myChart\" height=\"75\"></canvas>",
							"",
							"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js\"></script> ",
							"",
							"<script>",
							"    var ctx = document.getElementById(\"myChart\");",
							"",
							"    var myChart = new Chart(ctx, {",
							"        type: \"bar\",",
							"        data: {",
							"            labels: [],",
							"            datasets: [{",
							"                data: [],",
							"                ",
							"                // Change these colours to customize the chart",
							"                backgroundColor: [\"#003f5c\", \"#58508d\", \"#bc5090\", \"#ff6361\", \"#ffa600\"],",
							"            }]",
							"        },",
							"        options: {",
							"            legend: { display: false },",
							"            title: {",
							"                display: true,",
							"                text: 'Todo Details'",
							"            },",
							"            scales: {",
							"                xAxes: [{",
							"                    display: true,",
							"                    scaleLabel: {",
							"                        display: true,",
							"                        labelString: 'Attributes'",
							"                    }",
							"                }],",
							"                yAxes: [{",
							"                    display: true,",
							"                    scaleLabel: {",
							"                        display: true,",
							"                        labelString: 'Values'",
							"                    }",
							"                }]",
							"            }",
							"        }",
							"",
							"    });",
							"",
							"    // Access the data passed to pm.visualizer.set() from the JavaScript",
							"    // code of the Visualizer template",
							"    pm.getData(function (err, value) {",
							"        myChart.data.datasets[0].data = [value.response.id];",
							"        myChart.data.labels = ['ID'];",
							"        myChart.update();",
							"    });",
							"",
							"</script>`;",
							"",
							"function constructVisualizerPayload() {",
							"    var res = pm.response.json();",
							"    ",
							"    var visualizerData = {",
							"        ",
							"        // ID",
							"        id: res.id",
							"    };",
							"",
							"    return {response: visualizerData};",
							"}",
							"",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {\n    \"title\": \"OutWalk games\",\n    \"description\": \"Take a wa \",\n    \"id\": 890\n  }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/todos",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todos"
					]
				},
				"description": "\nThis endpoint allows you to create a new todo item by sending an HTTP POST request to the specified URL. The request should include a payload in the raw request body type with keys for \"title\", \"description\", and \"id\".\n\n### Request Body\n- `title` (string): The title of the todo item.\n- `description` (string): The description of the todo item.\n- `id` (number): The unique identifier for the todo item.\n\n### Response\nUpon successful execution, the endpoint returns a status code of 200 and a JSON object containing the newly created todo item with its corresponding \"id\", \"title\", and \"description\" keys.\n\nExample:\n```json\n{\n    \"id\": 0,\n    \"title\": \"\",\n    \"description\": \"\"\n}\n```\n"
			},
			"response": []
		},
		{
			"name": "Delete Todo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is a JSON object with success property\", function () {",
							"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('success');",
							"",
							"    // Verify the length of the success property",
							"    pm.expect(pm.response.json().success.length).to.be.greaterThan(0, \"Success property should not be empty\");",
							"});// Test for response content type",
							"pm.test(\"Response has content type of application/json\", function () {",
							"    pm.expect(pm.response).to.have.header('Content-Type', 'application/json');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/todos/50898",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todos",
						"50898"
					]
				},
				"description": "\n### Delete Todo\nThis endpoint is used to delete a specific todo item.\n\n#### Request\n- Method: DELETE\n- URL: `http://localhost:3000/todos/50898`\n\n#### Response\n- Status: 200\n- Content-Type: application/json\n- Body:\n  ```json\n  {\n      \"success\": \"\"\n  }\n  ```\n"
			},
			"response": []
		}
	]
}