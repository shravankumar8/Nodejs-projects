/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const path = require("path");
const cors= require("cors");
var port = 3000;
var app = express();
app.use(cors())
todos = [
  {
    title: "brush",
    description: "open bathroom and brush your teech",
    id: 243345,
  },
];
// 1.GET /todos - Retrieve all todo items
app.get("/todos", (req, res) => {
  res.status(200).json(todos);
});
// 2.GET /todos/:id - Retrieve a specific todo item by ID
app.get("/todos/:id", (req, res) => {
  id = req.params.id;
  for (var i = 0; i < todos.length; i++) {
    if (todos[i].id == id) {
      return res.status(200).json(todos[i]);
    }
    return res.status(404).json({ error: "ID not found" });
  }
});
// 3. POST /todos - Create a new todo item
idmaker = () => {
  var id = Math.round(Math.random() * 100000);
  for (var i = 0; i < todos.length; i++) {
    if (todos[i].id == id) {
      id = Math.round(Math.random() * 100000);
    }
    return id;
  }
};
app.use(bodyParser.json());
app.post("/todos", (req, res) => {
  data = {
    id: idmaker(),
    title: req.body.title,
    description: req.body.description,
  };
  todos.push(data);
  res.status(200).send(data);
});

/*PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }*/
app.put("/todos/:id", function (req, res) {
  id = req.params.id;
  newdisc = req.body.description;
  for (var i = 0; i < todos.length; i++) {
    if (todos[i].id == id) {
      todos[i].description = newdisc;
      res.status(200).json({ success: "the data is saved successfully" });
      return;
    }
  }
  res.status(404).json({ error: "the data is not saved successfully" });
});
// DELETE /todos/:id - Delete a todo item by ID
function findIndex(id) {
  for (let i = 0; i < todos.length; i++) {
    if (todos[i].id == id) return i;
  }
  return -1;
}
app.delete("/todos/:id", (req, res) => {
  try {
    id = req.params.id;
    index = findIndex(id);
    if(index != -1 ){

      todos.splice(index, 1);
    }else{
      return res.status(404).json({ error: "not found bhai" });

    }
    res.status(200).json({ success: "delete hogaya" });
  } catch (error) {
    res.status(404).json({ error: "error deleting" });
  }
});
app.get("*", (req, res) => {
  res.status(404).json({message:"errir bha 404 "})
});

app.listen(port, () => {
  console.log("the server is started on http://localhost:" + port);
});
